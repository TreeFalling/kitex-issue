// Code generated by Kitex v0.6.0. DO NOT EDIT.

package gopushservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
	kitex_gen "test/kitex-issue/kitex_gen"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	OnPushMessage(ctx context.Context, callOptions ...callopt.Option) (stream GoPushService_OnPushMessageClient, err error)
	Push(ctx context.Context, Req *kitex_gen.GoPushRequest, callOptions ...callopt.Option) (r *kitex_gen.GoPushResponse, err error)
}

type GoPushService_OnPushMessageClient interface {
	streaming.Stream
	Send(*kitex_gen.PushRequest) error
	Recv() (*kitex_gen.PushResponse, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kGoPushServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kGoPushServiceClient struct {
	*kClient
}

func (p *kGoPushServiceClient) OnPushMessage(ctx context.Context, callOptions ...callopt.Option) (stream GoPushService_OnPushMessageClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.OnPushMessage(ctx)
}

func (p *kGoPushServiceClient) Push(ctx context.Context, Req *kitex_gen.GoPushRequest, callOptions ...callopt.Option) (r *kitex_gen.GoPushResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Push(ctx, Req)
}
