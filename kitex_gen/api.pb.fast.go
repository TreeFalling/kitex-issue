// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package kitex_gen

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *PushRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PushRequest[number], err)
}

func (x *PushRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadSfixed64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ToManIds = append(x.ToManIds, v)
			return offset, err
		})
	return offset, err
}

func (x *PushRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *PushResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PushResponse[number], err)
}

func (x *PushResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ToManId, offset, err = fastpb.ReadSfixed64(buf, _type)
	return offset, err
}

func (x *PushResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *GoPushRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GoPushRequest[number], err)
}

func (x *GoPushRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ToManIds = append(x.ToManIds, v)
			return offset, err
		})
	return offset, err
}

func (x *GoPushRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *GoPushResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *PushRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PushRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.ToManIds) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetToManIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteSfixed64(buf[offset:], numTagOrKey, x.GetToManIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *PushRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Msg) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *PushResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PushResponse) fastWriteField1(buf []byte) (offset int) {
	if x.ToManId == 0 {
		return offset
	}
	offset += fastpb.WriteSfixed64(buf[offset:], 1, x.GetToManId())
	return offset
}

func (x *PushResponse) fastWriteField2(buf []byte) (offset int) {
	if len(x.Msg) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GoPushRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GoPushRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.ToManIds) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetToManIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetToManIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *GoPushRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Msg) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GoPushResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *PushRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PushRequest) sizeField1() (n int) {
	if len(x.ToManIds) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetToManIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeSfixed64(numTagOrKey, x.GetToManIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *PushRequest) sizeField2() (n int) {
	if len(x.Msg) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetMsg())
	return n
}

func (x *PushResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PushResponse) sizeField1() (n int) {
	if x.ToManId == 0 {
		return n
	}
	n += fastpb.SizeSfixed64(1, x.GetToManId())
	return n
}

func (x *PushResponse) sizeField2() (n int) {
	if len(x.Msg) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetMsg())
	return n
}

func (x *GoPushRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GoPushRequest) sizeField1() (n int) {
	if len(x.ToManIds) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetToManIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetToManIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *GoPushRequest) sizeField2() (n int) {
	if len(x.Msg) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetMsg())
	return n
}

func (x *GoPushResponse) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

var fieldIDToName_PushRequest = map[int32]string{
	1: "ToManIds",
	2: "Msg",
}

var fieldIDToName_PushResponse = map[int32]string{
	1: "ToManId",
	2: "Msg",
}

var fieldIDToName_GoPushRequest = map[int32]string{
	1: "ToManIds",
	2: "Msg",
}

var fieldIDToName_GoPushResponse = map[int32]string{}
