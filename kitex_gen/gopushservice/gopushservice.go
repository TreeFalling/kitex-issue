// Code generated by Kitex v0.6.0. DO NOT EDIT.

package gopushservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	kitex_gen "test/kitex-issue/kitex_gen"
)

func serviceInfo() *kitex.ServiceInfo {
	return goPushServiceServiceInfo
}

var goPushServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "GoPushService"
	handlerType := (*kitex_gen.GoPushService)(nil)
	methods := map[string]kitex.MethodInfo{
		"OnPushMessage": kitex.NewMethodInfo(onPushMessageHandler, newOnPushMessageArgs, newOnPushMessageResult, false),
		"Push":          kitex.NewMethodInfo(pushHandler, newPushArgs, newPushResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "kitex_issue",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.0",
		Extra:           extra,
	}
	return svcInfo
}

func onPushMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &goPushServiceOnPushMessageServer{st}
	return handler.(kitex_gen.GoPushService).OnPushMessage(stream)
}

type goPushServiceOnPushMessageClient struct {
	streaming.Stream
}

func (x *goPushServiceOnPushMessageClient) Send(m *kitex_gen.PushRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *goPushServiceOnPushMessageClient) Recv() (*kitex_gen.PushResponse, error) {
	m := new(kitex_gen.PushResponse)
	return m, x.Stream.RecvMsg(m)
}

type goPushServiceOnPushMessageServer struct {
	streaming.Stream
}

func (x *goPushServiceOnPushMessageServer) Send(m *kitex_gen.PushResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *goPushServiceOnPushMessageServer) Recv() (*kitex_gen.PushRequest, error) {
	m := new(kitex_gen.PushRequest)
	return m, x.Stream.RecvMsg(m)
}

func newOnPushMessageArgs() interface{} {
	return &OnPushMessageArgs{}
}

func newOnPushMessageResult() interface{} {
	return &OnPushMessageResult{}
}

type OnPushMessageArgs struct {
	Req *kitex_gen.PushRequest
}

func (p *OnPushMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(kitex_gen.PushRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *OnPushMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *OnPushMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *OnPushMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in OnPushMessageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *OnPushMessageArgs) Unmarshal(in []byte) error {
	msg := new(kitex_gen.PushRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var OnPushMessageArgs_Req_DEFAULT *kitex_gen.PushRequest

func (p *OnPushMessageArgs) GetReq() *kitex_gen.PushRequest {
	if !p.IsSetReq() {
		return OnPushMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *OnPushMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OnPushMessageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type OnPushMessageResult struct {
	Success *kitex_gen.PushResponse
}

var OnPushMessageResult_Success_DEFAULT *kitex_gen.PushResponse

func (p *OnPushMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(kitex_gen.PushResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *OnPushMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *OnPushMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *OnPushMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in OnPushMessageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *OnPushMessageResult) Unmarshal(in []byte) error {
	msg := new(kitex_gen.PushResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *OnPushMessageResult) GetSuccess() *kitex_gen.PushResponse {
	if !p.IsSetSuccess() {
		return OnPushMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *OnPushMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*kitex_gen.PushResponse)
}

func (p *OnPushMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OnPushMessageResult) GetResult() interface{} {
	return p.Success
}

func pushHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(kitex_gen.GoPushRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(kitex_gen.GoPushService).Push(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PushArgs:
		success, err := handler.(kitex_gen.GoPushService).Push(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PushResult)
		realResult.Success = success
	}
	return nil
}
func newPushArgs() interface{} {
	return &PushArgs{}
}

func newPushResult() interface{} {
	return &PushResult{}
}

type PushArgs struct {
	Req *kitex_gen.GoPushRequest
}

func (p *PushArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(kitex_gen.GoPushRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PushArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PushArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PushArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PushArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PushArgs) Unmarshal(in []byte) error {
	msg := new(kitex_gen.GoPushRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PushArgs_Req_DEFAULT *kitex_gen.GoPushRequest

func (p *PushArgs) GetReq() *kitex_gen.GoPushRequest {
	if !p.IsSetReq() {
		return PushArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PushArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PushArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PushResult struct {
	Success *kitex_gen.GoPushResponse
}

var PushResult_Success_DEFAULT *kitex_gen.GoPushResponse

func (p *PushResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(kitex_gen.GoPushResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PushResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PushResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PushResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PushResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PushResult) Unmarshal(in []byte) error {
	msg := new(kitex_gen.GoPushResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PushResult) GetSuccess() *kitex_gen.GoPushResponse {
	if !p.IsSetSuccess() {
		return PushResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PushResult) SetSuccess(x interface{}) {
	p.Success = x.(*kitex_gen.GoPushResponse)
}

func (p *PushResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PushResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) OnPushMessage(ctx context.Context) (GoPushService_OnPushMessageClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "OnPushMessage", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &goPushServiceOnPushMessageClient{res.Stream}
	return stream, nil
}

func (p *kClient) Push(ctx context.Context, Req *kitex_gen.GoPushRequest) (r *kitex_gen.GoPushResponse, err error) {
	var _args PushArgs
	_args.Req = Req
	var _result PushResult
	if err = p.c.Call(ctx, "Push", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
